plugins {
    id 'org.beryx.jlink' version '2.2.1'
    id "com.jfrog.bintray" version "1.8.4"
    id 'java'
    id 'maven-publish'
    id 'idea'
}

group 'org.mrcube'
version = '1.1.0'
mainClassName = 'org.mrcube.mrcube/org.mrcube.MR3'
sourceCompatibility = targetCompatibility = '11'

project.ext {
    moduleName = 'org.mrcube.mrcube'
    artifactId = 'mrcube'
    defaultEncoding = 'UTF-8'
}

repositories {
    jcenter()
}

wrapper {
    gradleVersion = '5.0'
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
        attributes 'Implementation-Title': "mrcube",
                'Main-Class': 'org.mrcube.MR3'
    }
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'junit',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

idea {
    module {
        inheritOutputDirs = true
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

test {
    useJUnitPlatform()
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
}

jlink {
    mergedModule {
        requires 'java.desktop'
        requires 'java.logging'
        uses 'org.apache.jena.sys.JenaSubsystemLifecycle'
    }
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'mrcube'
    }
    imageDir = file("$buildDir/mrcube-${version}")
    imageZip = file("$buildDir/mrcube-${version}.zip")

}

tasks.jlink.doLast {
    copy {
        from('./README.md')
        into("$buildDir/mrcube-${version}")
    }
    copy {
        from('./README.ja.md')
        into("$buildDir/mrcube-${version}")
    }
    copy {
        from('./LICENSE')
        into("$buildDir/mrcube-${version}")
    }
}

dependencies {
    compile 'jgraph:jgraph:5.13.0.0'
    compile 'org.apache.jena:jena-core:3.9.0'
    compile 'org.slf4j:slf4j-simple:1.7.25'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId = 'org.mrcube'
            artifactId = 'mrcube'
            version = '1.1.0'

            from components.java
            pom {
                name = 'MRCube'
                description = 'Meta-Model Management based on RDFs Revision Reflection'
                url = 'http://mrcube.org/'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
                        url = 'http://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 't-morita'
                        name = 'Takeshi Morita'
                        email = 't_morita@ae.keio.ac.jp'
                    }
                }
            }
        }
    }
}

def siteUrl = 'https://mrcube.org/'
def githubUrl = 'https://github.com/mr-3/mrcube'
bintray {
    user = project.getProperty('bintray_user')
    key = project.getProperty('bintray_api_key')
    publications = ['MyPublication']
    override = true
    pkg {
        repo = 'maven'
        name = project.group + ':' + project.ext.artifactId
        userOrg = 'mrcube'
        licenses = ['GPL']
        websiteUrl = siteUrl
        vcsUrl = githubUrl + '.git'
        issueTrackerUrl = githubUrl + '/issues'
        version {
            name = project.version
        }
    }
}
